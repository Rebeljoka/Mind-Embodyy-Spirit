"""
Django settings for config project.

Generated by 'django-admin startproject' using Django 5.2.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path
import os
import shutil
import dj_database_url
import cloudinary
from django.conf import settings

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Load environment variables from env.py if it exists
if os.path.exists(BASE_DIR / "env.py"):
    import env  # noqa: F401

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get("SECRET_KEY")
if not SECRET_KEY:
    raise ValueError("The SECRET_KEY environment variable is not set.")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.environ.get("DEBUG", "False").lower() == "true"


ALLOWED_HOSTS = [
    'localhost',
    '127.0.0.1',
    '*.herokuapp.com',
    'mind-embodyy-spirit-92af4b6525c8.herokuapp.com',
]

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'allauth',
    'allauth.account',
    'tailwind',
    'theme',
    'cloudinary',
    'cloudinary_storage',
    # Local apps
    'accounts',
    'gallery',
    'newsletter',
    'orders',
    'core',
]

if DEBUG:
    # Add django_browser_reload only in DEBUG mode
    INSTALLED_APPS += ['django_browser_reload']

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'orders.middleware.RequireJSONForOrdersCreate',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    "allauth.account.middleware.AccountMiddleware",
]

if DEBUG:
    # Add django_browser_reload middleware only in DEBUG mode
    MIDDLEWARE += [
        "django_browser_reload.middleware.BrowserReloadMiddleware",
    ]

ROOT_URLCONF = 'config.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'django.template.context_processors.debug',
            ],
        },
    },
]

WSGI_APPLICATION = 'config.wsgi.application'

# Cloudinary configuration (read from environment)
CLOUDINARY_URL = os.environ.get('CLOUDINARY_URL')

# Configure Cloudinary-backed storage when a CLOUDINARY_URL is provided.
if CLOUDINARY_URL:
    # Use django-cloudinary-storage's storage backend for media files
    DEFAULT_FILE_STORAGE = 'cloudinary_storage.storage.MediaCloudinaryStorage'
    CLOUDINARY_STORAGE = {
        'CLOUD_NAME': None,  # parsed from CLOUDINARY_URL by the cloudinary lib
        'API_KEY': None,
        'API_SECRET': None,
    }
else:
    # Fail fast in production if Cloudinary is required. In DEBUG/dev we allow
    # missing CLOUDINARY_URL so local media can be used.
    if not DEBUG:
        raise RuntimeError(
            "CLOUDINARY_URL is not set; required in production."
        )

cloudinary.config(
    secure=True  # ðŸ‘ˆ Forces HTTPS for all Cloudinary URLs
)

CLOUDINARY_DEFAULT_TRANSFORMATIONS = {
    'fetch_format': 'auto',
    'quality': 'auto'
}


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    'default': dj_database_url.config(
        conn_max_age=600,
        conn_health_checks=True,
    )
}


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': (
            'django.contrib.auth.password_validation.'
            'UserAttributeSimilarityValidator'
        ),
    },
    {
        'NAME': (
            'django.contrib.auth.password_validation.'
            'MinimumLengthValidator'
        ),
    },
    {
        'NAME': (
            'django.contrib.auth.password_validation.'
            'CommonPasswordValidator'
        ),
    },
    {
        'NAME': (
            'django.contrib.auth.password_validation.'
            'NumericPasswordValidator'
        ),
    },
]

# Authentication backends belong in AUTHENTICATION_BACKENDS, not
# in AUTH_PASSWORD_VALIDATORS. The validators above are Django's built-in
# password validators; auth backends are responsible for authentication.


# Authentication backends (order matters: ModelBackend first, then allauth)
AUTHENTICATION_BACKENDS = [
    'django.contrib.auth.backends.ModelBackend',
    'allauth.account.auth_backends.AuthenticationBackend',
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = 'static/'
STATIC_ROOT = os.path.join(BASE_DIR, "staticfiles")
MEDIA_URL = '/media/'

if DEBUG:
    # Development settings
    STATICFILES_DIRS = [BASE_DIR / 'static']
    STATIC_ROOT = BASE_DIR / 'staticfiles'
    TAILWIND_APP_NAME = 'theme'
    NPM_BIN_PATH = 'npm.cmd'
else:
    # Production settings
    STATIC_ROOT = BASE_DIR / 'staticfiles'
    STATICFILES_DIRS = [
        BASE_DIR / 'theme' / 'static',
        BASE_DIR / 'static',
    ]

# WhiteNoise configuration
STORAGES = {
    "staticfiles": {
        "BACKEND": "whitenoise.storage.CompressedManifestStaticFilesStorage",
    },
}

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Initialize NPM_BIN_PATH with a default value
NPM_BIN_PATH = None

# Only run npm check and error in local development (when DEBUG is True)
if DEBUG:
    _npm_path = shutil.which('npm') or shutil.which('npm.cmd')
    NPM_BIN_PATH = os.environ.get('NPM_BIN_PATH') or _npm_path
    if not NPM_BIN_PATH:
        raise RuntimeError(
            "NPM executable not found on PATH (checked 'npm' and 'npm.cmd') and "
            "NPM_BIN_PATH env var is not set. Install Node.js/npm or set "
            "NPM_BIN_PATH to the path of the npm executable."
        )


# Views (route names) that the orders JSON-only middleware should enforce.
# By default we enforce JSON on the `orders-create` route. This can be
# overridden in test or deployment settings.
ORDERS_JSON_ONLY_VIEWS = [
    "orders-create",
]
